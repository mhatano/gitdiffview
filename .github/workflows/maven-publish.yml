name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      simulate_tag:
        description: 'If set, simulate running the tag-release steps for this tag name (e.g. v0.1.0).'
        required: false
        default: ''
      dry_run:
        description: 'If "true", skip actually creating GitHub Release and uploading assets (safe test).'
        required: false
        default: 'true'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 25
      uses: actions/setup-java@v4
      with:
        java-version: '25'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven (and deploy for tags)
      run: mvn -B clean verify

    - name: Determine release tag (real tag or simulated)
      id: tag
      run: |
        # default to empty
        echo "tag_name="
        # If workflow_dispatch with simulate_tag, use that
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.simulate_tag }}" ]; then
          echo "tag_name=${{ github.event.inputs.simulate_tag }}" >> $GITHUB_OUTPUT
        else
          # If this run was triggered by a tag push, populate tag_name from the ref
          if [ "${GITHUB_REF#refs/tags/}" != "$GITHUB_REF" ]; then
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Deploy to GitHub Packages
      if: steps.tag.outputs.tag_name != '' && (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
      run: mvn deploy
      env:
        GITHUB_TOKEN: ${{ github.token }}

    # Create a GitHub release for tag pushes (or simulated tag) and upload the built JAR as a release asset
    - name: Create GitHub Release
      if: steps.tag.outputs.tag_name != '' && (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        release_name: ${{ steps.tag.outputs.tag_name }}
        body: "Automated release for ${{ steps.tag.outputs.tag_name }} generated by GitHub Actions."

    - name: Find built JAR
      if: steps.tag.outputs.tag_name != '' && (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
      id: find_jar
      run: |
        set -e
        jar=$(ls target/*.jar 2>/dev/null | head -n1 || true)
        if [ -z "$jar" ]; then
          echo "No JAR found in target/ â€” ensure the build produced a JAR."
          exit 1
        fi
        echo "jar=$jar" >> $GITHUB_OUTPUT
        name=$(basename "$jar")
        echo "name=$name" >> $GITHUB_OUTPUT

    - name: Upload JAR to Release
      if: steps.tag.outputs.tag_name != '' && (github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run == 'false')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.find_jar.outputs.jar }}
        asset_name: ${{ steps.find_jar.outputs.name }}
        asset_content_type: application/java-archive
